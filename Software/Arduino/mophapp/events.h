/*$file${.::events.h} ######################################################*/
/*
* Model: gris5A.qm
* File:  ${.::events.h}
*
* This code has been generated by QM 4.4.0 (https://www.state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${.::events.h} ###################################################*/
/* events.h - Arduino software for the GRIS5A (C) and No2 (C) motion phantom
 * Copyright (C) 2019 by Stefan Grimm
 */

#ifndef __EVENTS_H
#define __EVENTS_H

enum Signals {
  MANUAL_MOTION_MODE_SIG = Q_USER_SIG,
  PRESET_MODE_SIG,
  REMOTE_MODE_SIG,
  CALIBRATION_MODE_SIG,
  PROGRAM_CHANGE_SIG,
  MOTOR_STEP_FORWARD_SIG,
  MOTOR_STEP_BACKWARD_SIG,
  MOTOR_MOVE_RELATIVE_SIG,
  MOTOR_MOVE_ASOLUTE_SIG,
  DKBIN_DISPATCH_SIG
};

#ifdef GRIS5A
enum ServoNumber {
  LURTN=0,
  LULNG,
  LLRTN,
  LLLNG,
  RLLNG,
  RLRTN,
  RULNG,
  RURTN,
  GALNG,
  GARTN
};
#elif NO2
enum ServoNumber {
  LLNG=0,
  RLNG,
  GLNG,
  LRTN,
  RRTN,
  GRTN
};
#endif

enum SerialInCommand {
  SOFTDKB = 1,
  ABSMOVE = 2,
  FREEMEM = 3,
  SYNC = 4
};

struct SerialInEvArgs {
  SerialInEvArgs () : raw(0) {}
  SerialInEvArgs (const SerialInEvArgs& t) : raw(t.raw) {}
  SerialInEvArgs (uint8_t rawValue) : raw(rawValue) {}

  SerialInCommand getCmd() { return (SerialInCommand)Cmd; }

  union {
    struct {
      uint8_t Cmd  : 3;
      uint8_t Data : 5;
    };
    uint8_t raw;
  };
};

enum Direction {
  BACKWARDS = 0,
  FORWARDS
};

struct MotorMoveRelativeEvArgs {
  MotorMoveRelativeEvArgs () : raw(0) {}
  MotorMoveRelativeEvArgs (const MotorMoveRelativeEvArgs& t) : raw(t.raw) {}
  MotorMoveRelativeEvArgs (uint8_t rawValue) : raw(rawValue) {}
  MotorMoveRelativeEvArgs (uint8_t servoNum, Direction direction) : raw((direction << 4) | servoNum) {}

  Direction getDirection() { return (Direction)Dir; }

  union {
    struct {
      uint8_t ServoNum : 4;
      uint8_t Dir      : 1;
      uint8_t Any      : 3;
    };
    uint8_t raw;
  };
};

struct ProgramChangeEvArgs {
  ProgramChangeEvArgs () : raw(0) {}
  ProgramChangeEvArgs (const ProgramChangeEvArgs& t) : raw(t.raw) {}
  ProgramChangeEvArgs (uint8_t rawValue) : raw(rawValue) {}

  union {
    struct {
      uint8_t ProgNo : 4;
      uint8_t Any    : 4;
    };
    uint8_t raw;
  };
};

#ifdef MOTOROUT
struct MotorEvArgs {
  MotorEvArgs () : raw(0) {}
  MotorEvArgs (const MotorEvArgs& t) : raw(t.raw) {}
  MotorEvArgs (uint16_t rawValue) : raw(rawValue) {}
  MotorEvArgs (uint8_t m, uint8_t pos, uint8_t step)
    : raw((pos << 8) | (step << 4) | m) {}
  union {
    struct {
      uint16_t ServoNum : 4;
      uint16_t StepSize : 4;
      uint16_t Pos   : 8;
    };
    uint16_t raw;
  };
};
#endif

#endif